[{"kind":1,"language":"markdown","value":"# SQL 101 - How to Rank Rows in Byzer\nWhat’s the difference? — RANK() vs.DENSE_RANK() vs.ROW_NUMBER()\n<img src=\"../../images/SQL101/ranking.jpeg\" alt=\"SQL Ranking Funtions\" width=\"500\" />\n\nWhat’s the difference between RANK() vs. DENSE_RANK() vs. ROW_NUMBER()? \nHow are they different from each other?\nStruggle to answer this question? Well, you have to follow this tutorial!\n\nLet’s go back to the real world and learn the difference from a common retail analytics use case. \nWe’ll run some queries in Byzer Notebook so you can easily compare them to each other.\n\n## Retail Analytics: Finding Top X Best-Selling Products of This Season\nData is the backbone of the retail industry. \nWhat products should be sold in which store at what price is determined by data insights extracted from analyzing customer purchase history. \nOne of the must-have metrics is Top X best-selling products within a timeframe.\n\nIn this tutorial, let’s run some SQL queries in Byzer Notebook to find the Top 3 Best-Selling Products of this season for a retailer.\nWe’ll use the sales table. It has the following columns:\n\nproduct - The name of the product.\n\nproduct_price - The price of the product.\n\nitems_sold - The number of items sold.\n\n<img src=\"../../images/SQL101/sales.png\" alt=\"Dummy Sales Table\" width=\"300\" />\n\nLet’s create a dummy table in Byzer running the following code:","outputs":[]},{"kind":2,"language":"mlsql","value":"-- store dummy sales data as a JSON string \n\nset sales='''\nproduct,product_price,items_sold\na,\t    44.12,\t        6547\t\nb,  \t100,        \t547\t\nc,\t    12.47,      \t48\nd,     \t12,         \t3254\t\ne, \t    100,        \t547\t\nf,   \t12,         \t3254\t\ng,      12,         \t3254\t\nh,  \t7.77,       \t147\n''';\n\n-- convert JSON string to a table\nload csvStr.`sales` options header=\"true\" and inferSchema=\"true\"\nas sales;\n\n-- check inferred schema \n-- !desc sales;\n","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"product\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"product_price\",\n\t\t\t\t\"type\": \"double\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"items_sold\",\n\t\t\t\t\"type\": \"double\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"product\": \"a\",\n\t\t\t\"product_price\": 44.12,\n\t\t\t\"items_sold\": 6547\n\t\t},\n\t\t{\n\t\t\t\"product\": \"b\",\n\t\t\t\"product_price\": 100,\n\t\t\t\"items_sold\": 547\n\t\t},\n\t\t{\n\t\t\t\"product\": \"c\",\n\t\t\t\"product_price\": 12.47,\n\t\t\t\"items_sold\": 48\n\t\t},\n\t\t{\n\t\t\t\"product\": \"d\",\n\t\t\t\"product_price\": 12,\n\t\t\t\"items_sold\": 3254\n\t\t},\n\t\t{\n\t\t\t\"product\": \"e\",\n\t\t\t\"product_price\": 100,\n\t\t\t\"items_sold\": 547\n\t\t},\n\t\t{\n\t\t\t\"product\": \"f\",\n\t\t\t\"product_price\": 12,\n\t\t\t\"items_sold\": 3254\n\t\t},\n\t\t{\n\t\t\t\"product\": \"g\",\n\t\t\t\"product_price\": 12,\n\t\t\t\"items_sold\": 3254\n\t\t},\n\t\t{\n\t\t\t\"product\": \"h\",\n\t\t\t\"product_price\": 7.77,\n\t\t\t\"items_sold\": 147\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"### Pick Which One? RANK() or DENSE_RANK() or ROW_NUMBER()\nTo compute the most popular items, intuitively, we would sum the revenue up for each product, sort products in descending order of total revenue, and then pick the top 3 products.\nAlternatively, we can use the SQL window function — RANK() to compute the ranking and then filter data to show the top 3 items.\n\nHowever, the results might surprise you as you run the query with RANK():","outputs":[]},{"kind":2,"language":"mlsql","value":"SELECT\n  RANK() OVER(ORDER BY product_price * items_sold DESC) AS rank,\n  product,\n  product_price * items_sold AS revenue\nFROM sales\nAS sales_rank;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"rank\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"product\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"revenue\",\n\t\t\t\t\"type\": \"double\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"rank\": 1,\n\t\t\t\"product\": \"a\",\n\t\t\t\"revenue\": 288853.63999999996\n\t\t},\n\t\t{\n\t\t\t\"rank\": 2,\n\t\t\t\"product\": \"b\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"rank\": 2,\n\t\t\t\"product\": \"e\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"rank\": 4,\n\t\t\t\"product\": \"d\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"rank\": 4,\n\t\t\t\"product\": \"f\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"rank\": 4,\n\t\t\t\"product\": \"g\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"rank\": 7,\n\t\t\t\"product\": \"h\",\n\t\t\t\"revenue\": 1142.1899999999998\n\t\t},\n\t\t{\n\t\t\t\"rank\": 8,\n\t\t\t\"product\": \"c\",\n\t\t\t\"revenue\": 598.5600000000001\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"Where is the No.3 item?\n\nLet’s run the following query that ranks the rows by revenue using the three ranking functions described above:","outputs":[]},{"kind":2,"language":"mlsql","value":"SELECT\n  RANK() OVER(ORDER BY product_price * items_sold DESC) AS rank,\n  DENSE_RANK() OVER(ORDER BY product_price * items_sold DESC) AS dense_rank,\n  ROW_NUMBER() OVER(ORDER BY product_price * items_sold DESC) AS row_number,\n  product,\n  product_price * items_sold AS revenue\nFROM sales\nAS sales_rank;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"rank\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"dense_rank\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"row_number\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"product\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"revenue\",\n\t\t\t\t\"type\": \"double\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"rank\": 1,\n\t\t\t\"dense_rank\": 1,\n\t\t\t\"row_number\": 1,\n\t\t\t\"product\": \"a\",\n\t\t\t\"revenue\": 288853.63999999996\n\t\t},\n\t\t{\n\t\t\t\"rank\": 2,\n\t\t\t\"dense_rank\": 2,\n\t\t\t\"row_number\": 2,\n\t\t\t\"product\": \"b\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"rank\": 2,\n\t\t\t\"dense_rank\": 2,\n\t\t\t\"row_number\": 3,\n\t\t\t\"product\": \"e\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"rank\": 4,\n\t\t\t\"dense_rank\": 3,\n\t\t\t\"row_number\": 4,\n\t\t\t\"product\": \"d\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"rank\": 4,\n\t\t\t\"dense_rank\": 3,\n\t\t\t\"row_number\": 5,\n\t\t\t\"product\": \"f\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"rank\": 4,\n\t\t\t\"dense_rank\": 3,\n\t\t\t\"row_number\": 6,\n\t\t\t\"product\": \"g\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"rank\": 7,\n\t\t\t\"dense_rank\": 4,\n\t\t\t\"row_number\": 7,\n\t\t\t\"product\": \"h\",\n\t\t\t\"revenue\": 1142.1899999999998\n\t\t},\n\t\t{\n\t\t\t\"rank\": 8,\n\t\t\t\"dense_rank\": 5,\n\t\t\t\"row_number\": 8,\n\t\t\t\"product\": \"c\",\n\t\t\t\"revenue\": 598.5600000000001\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"#### See the difference?\n\nThe ROW_NUMBER() function is self-explanatory, as you’ve already seen the data. It simply assigns a consecutive ranking to each row ordered by revenue. If two rows have the same value, they won’t have the same ranking.","outputs":[]},{"kind":2,"language":"mlsql","value":"SELECT\n  ROW_NUMBER() OVER(ORDER BY product_price * items_sold DESC) AS row_number,\n  product,\n  product_price * items_sold AS revenue\nFROM sales\nAS sales_rank;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"row_number\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"product\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"revenue\",\n\t\t\t\t\"type\": \"double\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"row_number\": 1,\n\t\t\t\"product\": \"a\",\n\t\t\t\"revenue\": 288853.63999999996\n\t\t},\n\t\t{\n\t\t\t\"row_number\": 2,\n\t\t\t\"product\": \"b\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"row_number\": 3,\n\t\t\t\"product\": \"e\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"row_number\": 4,\n\t\t\t\"product\": \"d\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"row_number\": 5,\n\t\t\t\"product\": \"f\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"row_number\": 6,\n\t\t\t\"product\": \"g\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"row_number\": 7,\n\t\t\t\"product\": \"h\",\n\t\t\t\"revenue\": 1142.1899999999998\n\t\t},\n\t\t{\n\t\t\t\"row_number\": 8,\n\t\t\t\"product\": \"c\",\n\t\t\t\"revenue\": 598.5600000000001\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"The RANK() function creates a ranking of the rows based on the provided columns. \nIt starts with assigning “1” to the first row in the order and then gives higher numbers to rows lower in the order. If rows have the same value, they’re ranked the same. However, the next spot is shifted accordingly. \nFor example, if two rows are 2th (have the same rank), the next row will be 4th (i.e., 3rd doesn’t exist).","outputs":[]},{"kind":2,"language":"mlsql","value":"SELECT\n  RANK() OVER(ORDER BY product_price * items_sold DESC) AS rank,\n  product,\n  product_price * items_sold AS revenue\nFROM sales\nAS sales_rank;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"rank\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"product\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"revenue\",\n\t\t\t\t\"type\": \"double\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"rank\": 1,\n\t\t\t\"product\": \"a\",\n\t\t\t\"revenue\": 288853.63999999996\n\t\t},\n\t\t{\n\t\t\t\"rank\": 2,\n\t\t\t\"product\": \"b\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"rank\": 2,\n\t\t\t\"product\": \"e\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"rank\": 4,\n\t\t\t\"product\": \"d\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"rank\": 4,\n\t\t\t\"product\": \"f\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"rank\": 4,\n\t\t\t\"product\": \"g\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"rank\": 7,\n\t\t\t\"product\": \"h\",\n\t\t\t\"revenue\": 1142.1899999999998\n\t\t},\n\t\t{\n\t\t\t\"rank\": 8,\n\t\t\t\"product\": \"c\",\n\t\t\t\"revenue\": 598.5600000000001\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"The DENSE_RANK() function is rather similar. The only difference is that it doesn’t leave gaps in the ranking values. Even though more than one row can have the same rank, the rank of the next row will be one plus the previous number. For example, if two rows are 2rd, the next row will be 3rd.","outputs":[]},{"kind":2,"language":"mlsql","value":"SELECT\n  DENSE_RANK() OVER(ORDER BY product_price * items_sold DESC) AS dense_rank,\n  product,\n  product_price * items_sold AS revenue\nFROM sales\nAS sales_rank;","outputs":[{"mime":"x-application/mlsql-notebook","value":"{\n\t\"schema\": {\n\t\t\"type\": \"struct\",\n\t\t\"fields\": [\n\t\t\t{\n\t\t\t\t\"name\": \"dense_rank\",\n\t\t\t\t\"type\": \"integer\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"product\",\n\t\t\t\t\"type\": \"string\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t},\n\t\t\t{\n\t\t\t\t\"name\": \"revenue\",\n\t\t\t\t\"type\": \"double\",\n\t\t\t\t\"nullable\": true,\n\t\t\t\t\"metadata\": {}\n\t\t\t}\n\t\t]\n\t},\n\t\"data\": [\n\t\t{\n\t\t\t\"dense_rank\": 1,\n\t\t\t\"product\": \"a\",\n\t\t\t\"revenue\": 288853.63999999996\n\t\t},\n\t\t{\n\t\t\t\"dense_rank\": 2,\n\t\t\t\"product\": \"b\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"dense_rank\": 2,\n\t\t\t\"product\": \"e\",\n\t\t\t\"revenue\": 54700\n\t\t},\n\t\t{\n\t\t\t\"dense_rank\": 3,\n\t\t\t\"product\": \"d\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"dense_rank\": 3,\n\t\t\t\"product\": \"f\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"dense_rank\": 3,\n\t\t\t\"product\": \"g\",\n\t\t\t\"revenue\": 39048\n\t\t},\n\t\t{\n\t\t\t\"dense_rank\": 4,\n\t\t\t\"product\": \"h\",\n\t\t\t\"revenue\": 1142.1899999999998\n\t\t},\n\t\t{\n\t\t\t\"dense_rank\": 5,\n\t\t\t\"product\": \"c\",\n\t\t\t\"revenue\": 598.5600000000001\n\t\t}\n\t]\n}"}]},{"kind":1,"language":"markdown","value":"So DENSE_RANK()is the right ranking function to show top results in this use case.","outputs":[]}]